binary_sensor:
#########################################################      
# This turns the dimmer on from any out the light iputs 
#########################################################  
  - platform: template
    id: any_light_on
    name: "Any Light On"
    lambda: |-
      return (id(light_1).current_values.is_on() || id(light_2).current_values.is_on() || id(light_3).current_values.is_on());
#. Change the above for 1,2,3 lights when needed. 
    on_press:
      - light.turn_on: lightdimmer
    on_release:
      - light.turn_off: lightdimmer
    device_class: light
    entity_category: diagnostic
    web_server:
      sorting_weight: 10

#########################################################      
# Switch Input : 1
######################################################### 
  - platform: gpio
    id: switch_1
    pin:
      number: ${gpio_switch_1}
      mode: INPUT_PULLUP
      inverted: true
    name: ${switch_name_1}
    filters:
      - delayed_on: 10ms
    on_press:
      - light.toggle: light_1
#switch counter       
      - lambda: |-
          id(switch_1_press_count) += 1;
          ESP_LOGI("switch_counter", "Switch 1 pressed %d times", id(switch_1_press_count));
    web_server:
      sorting_weight: 10
 
#########################################################      
# Switch Input : 2
#########################################################
  - platform: gpio
    id: switch_2
    pin:
      number: ${gpio_switch_2}
      mode: INPUT_PULLUP
      inverted: true
    name: ${switch_name_2}
    filters:
      - delayed_on: 10ms
    on_press:
      - light.toggle: light_2 
#switch counter       
      - lambda: |-
          id(switch_2_press_count) += 1;
          ESP_LOGI("switch_counter", "Switch 2 pressed %d times", id(switch_2_press_count));      
    web_server:
      sorting_weight: 9.9    
#########################################################      
# Switch Input : 3
#########################################################
  - platform: gpio
    id: switch_3
    pin:
      number: ${gpio_switch_3}
      mode: INPUT_PULLUP
      inverted: true
    name: ${switch_name_3}
    filters:
      - delayed_on: 10ms
    on_press:
      - light.toggle: light_3
#switch counter       
      - lambda: |-
          id(switch_3_press_count) += 1;
          ESP_LOGI("switch_counter", "Switch 3 pressed %d times", id(switch_3_press_count));      
    web_server:
      sorting_weight: 10     
#########################################################      
# Switch Input : 4
#########################################################
  - platform: gpio
    id: switch_4
    pin:
      number: ${gpio_switch_4}
      mode: INPUT_PULLUP
      inverted: true
    name: ${switch_name_4}
    filters:
      - delayed_on: 13ms
      - delayed_off:  ${fan_delay_off}
    on_press:
      then:
        - light.turn_on: light_4
#switch counter       
        - lambda: |-
            id(switch_4_press_count) += 1;
            ESP_LOGI("switch_counter", "Switch 4 pressed %d times", id(switch_4_press_count));        
    on_release:
      then:
        - light.turn_off: light_4
    web_server:
      sorting_weight: 10



##################################################################################################################
# Light Control
##################################################################################################################
light:
  - platform: monochromatic
    id: lightdimmer
    output: output1
    name: ${lights_dimmer}
    default_transition_length: 10ms
    gamma_correct: 3.5
    restore_mode: ALWAYS_OFF
    web_server:
      sorting_weight: 1    
#########################################################      
# Light : 1 Home Assistant switch / webinter face switch
#########################################################
  - platform: binary
    id: light_1
    output: relay_1
    name: ${relay_light_name_1}
    restore_mode: ALWAYS_OFF
    web_server:
      sorting_weight: 2    

#########################################################      
# Light : 2 Home Assistant switch / webinter face switch
#########################################################
  - platform: binary
    id: light_2
    output: relay_2
    name: ${relay_light_name_2}
    restore_mode: ALWAYS_OFF
    web_server:
      sorting_weight: 2    
#########################################################      
# Light : 3 Home Assistant switch / webinter face switch
#########################################################
  - platform: binary
    id: light_3
    output: relay_3
    name: ${relay_light_name_3}
    restore_mode: ALWAYS_OFF
    web_server:
      sorting_weight: 2    
#########################################################      
# Light : 4 Home Assistant switch / webinter face switch
#########################################################
  - platform: binary
    id: light_4
    output: relay_4
    name: ${relay_light_name_4}
    restore_mode: ALWAYS_OFF
    web_server:
      sorting_weight: 3      



##################################################################################################################
# Outputs
##################################################################################################################
output:
#########################################################      
# Actual Dimmer Control Slider
#########################################################  
  - platform: ac_dimmer
    id: output1
    gate_pin: ${gpio_gate_pin}
    method: LEADING_PULSE
    init_with_half_cycle: True
    zero_cross_pin:
      number: ${gpio_zero_cross}
      mode:
        input: true
      inverted: false
    min_power: 20%
#########################################################      
# Relay Output : 1 
#########################################################
  - platform: gpio
    id: relay_1
    pin: ${gpio_relay_1}
#########################################################      
# Relay Output : 2
#########################################################
  - platform: gpio
    id: relay_2
    pin: ${gpio_relay_2}
#########################################################      
# Relay Output : 3 
#########################################################
  - platform: gpio
    id: relay_3
    pin: ${gpio_relay_3}
#########################################################      
# Relay Output : 4
#########################################################
  - platform: gpio
    id: relay_4
    pin: ${gpio_relay_4}



interval:
  - interval: 10s
    then:
      - lambda: |-
          auto parse_time = [](std::string s) -> int {
            int h = std::stoi(s.substr(0, 2));
            int m = std::stoi(s.substr(3, 2));
            return h * 60 + m;
          };

          int current_minutes = id(base_code_backup_internal_time).now().hour * 60 + id(base_code_backup_internal_time).now().minute;

          int t1_start = parse_time("${dimmer_time_1_start}");
          int t1_end   = parse_time("${dimmer_time_1_end}");
          int t2_start = parse_time("${dimmer_time_2_start}");
          int t2_end   = parse_time("${dimmer_time_2_end}");
          int t3_start = parse_time("${dimmer_time_3_start}");
          int t3_end   = parse_time("${dimmer_time_3_end}");

          float level = 0.0;

          if (current_minutes >= t1_start && current_minutes < t1_end)
            level = ${dimmer_level_1};
          else if (current_minutes >= t2_start && current_minutes < t2_end)
            level = ${dimmer_level_2};
          else if (current_minutes >= t3_start && current_minutes <= t3_end)
            level = ${dimmer_level_3};
          else
            level = 0.0;

          if (id(current_dimmer_level) != level) {
            id(current_dimmer_level) = level;
            ESP_LOGI("dimmer_sched", "Time: %dmin - New scheduled dimmer level: %.2f", current_minutes, level);
          }
      - if:
          condition:
            lambda: 'return id(lightdimmer).current_values.is_on();'
          then:
            - light.turn_on:
                id: lightdimmer
                brightness: !lambda 'return id(current_dimmer_level);'

# Runtime timers
  - interval: 1s
    then:
      - if:
          condition:
            light.is_on: light_1
          then:
            - lambda: 'id(light_1_runtime) += 1;'
      - if:
          condition:
            light.is_on: light_2
          then:
            - lambda: 'id(light_2_runtime) += 1;'
      - if:
          condition:
            light.is_on: light_3
          then:
            - lambda: 'id(light_3_runtime) += 1;'
      - if:
          condition:
            light.is_on: light_4
          then:
            - lambda: 'id(light_4_runtime) += 1;'





      
